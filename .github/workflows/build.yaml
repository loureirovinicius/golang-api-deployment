name: ci
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  DOCKER_IMAGE_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/golang-crud:v${{ github.run_id }}

jobs:
  unit-tests-and-build:
    strategy:
      fail-fast: true
      matrix:
        go-version: ["1.18.x", "1.19.x"]
        os: ["ubuntu-latest", "windows-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Test application
        run: |
          go fmt crud
          go test -race -v $(go list ./... | grep -v /vendor/)
          go vet crud

      - name: Build application
        run: go build -v -o app ./main.go
  
  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Execute script to define database
        run: |
          sudo apt-get update -y && sudo apt-get install gettext-base -y
          mkdir ../sql 
          sh configs.sh
        working-directory: scripts
        shell: bash

      - name: Build Dockerfile
        run: docker build --file Dockerfile -t "${DOCKER_IMAGE_TAG}" .

      - name: Create containers network
        run: docker network create ci-network

      - name: Setup database
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
        run: docker run --name postgres -d -p 5432:5432 -u postgres --mount type=bind,source="$(pwd)"/sql,target=/docker-entrypoint-initdb.d --network ci-network -e POSTGRES_USER="${POSTGRES_USER}" -e POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" --health-cmd=pg_isready --health-interval=10s --health-timeout=5s --health-retries=3 postgres:13-alpine

      - name: Wait until database is running
        run: while [ "`docker inspect -f {{.State.Health.Status}} postgres`" != "healthy" ]; do sleep 2; done
        
      - name: Run dockerized application
        run: docker run --name app -d -p 80:9000 --env-file configs.env --network ci-network -e HOST=postgres "${DOCKER_IMAGE_TAG}"

      - name: Make HTTP request to API to check its connections
        run: curl http://localhost/ | grep null

  push-image-to-registry:
    runs-on: ubuntu-latest
    needs: [ "unit-tests-and-build", "integration-test" ]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push to registry
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/golang-crud:latest
            ${{ env.DOCKER_IMAGE_TAG }}
